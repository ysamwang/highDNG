// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// calcTauC
Rcpp::List calcTauC(int pa, const arma::uvec& ch, int k, const arma::umat& condSets, const arma::umat& anSets, const arma::mat& Y, const arma::mat& yty);
RcppExport SEXP highDLingam_calcTauC(SEXP paSEXP, SEXP chSEXP, SEXP kSEXP, SEXP condSetsSEXP, SEXP anSetsSEXP, SEXP YSEXP, SEXP ytySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pa(paSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ch(chSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type condSets(condSetsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type anSets(anSetsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yty(ytySEXP);
    rcpp_result_gen = Rcpp::wrap(calcTauC(pa, ch, k, condSets, anSets, Y, yty));
    return rcpp_result_gen;
END_RCPP
}
// calcTauC1
Rcpp::List calcTauC1(int pa, const arma::uvec& ch, int k, const arma::umat& condSets, const arma::umat& anSets, const arma::mat& Y, const arma::mat& yty);
RcppExport SEXP highDLingam_calcTauC1(SEXP paSEXP, SEXP chSEXP, SEXP kSEXP, SEXP condSetsSEXP, SEXP anSetsSEXP, SEXP YSEXP, SEXP ytySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pa(paSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ch(chSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type condSets(condSetsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type anSets(anSetsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yty(ytySEXP);
    rcpp_result_gen = Rcpp::wrap(calcTauC1(pa, ch, k, condSets, anSets, Y, yty));
    return rcpp_result_gen;
END_RCPP
}
// calcTauMultiC
arma::vec calcTauMultiC(int pa, const arma::uvec& ch, int k, const arma::umat& condSets, const arma::umat& anSets, const arma::mat& Y, const arma::mat& yty);
RcppExport SEXP highDLingam_calcTauMultiC(SEXP paSEXP, SEXP chSEXP, SEXP kSEXP, SEXP condSetsSEXP, SEXP anSetsSEXP, SEXP YSEXP, SEXP ytySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pa(paSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type ch(chSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type condSets(condSetsSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type anSets(anSetsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yty(ytySEXP);
    rcpp_result_gen = Rcpp::wrap(calcTauMultiC(pa, ch, k, condSets, anSets, Y, yty));
    return rcpp_result_gen;
END_RCPP
}
